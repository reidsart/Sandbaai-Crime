<?php
/**
 * WhatsApp Notifications Class
 *
 * @package    Sandbaai_Crime
 * @subpackage Sandbaai_Crime/includes
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * WhatsApp Notifications class.
 *
 * Handles sending notifications via WhatsApp.
 *
 * @since      1.0.0
 */
class Sandbaai_WhatsApp_Notifications {

    /**
     * WhatsApp API endpoint.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $api_endpoint    The WhatsApp API endpoint.
     */
    private $api_endpoint;

    /**
     * WhatsApp API token.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $api_token    The WhatsApp API token.
     */
    private $api_token;

    /**
     * WhatsApp phone number ID.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $phone_number_id    The WhatsApp phone number ID.
     */
    private $phone_number_id;

    /**
     * Initialize the class and set its properties.
     *
     * @since    1.0.0
     */
    public function __construct() {
        $this->api_endpoint = 'https://graph.facebook.com/v17.0/';
        $this->api_token = get_option('sandbaai_crime_whatsapp_api_token', '');
        $this->phone_number_id = get_option('sandbaai_crime_whatsapp_phone_number_id', '');
    }

    /**
     * Send a WhatsApp notification about a crime report.
     *
     * @since    1.0.0
     * @param    Sandbaai_Crime_Report    $crime_report    The crime report object.
     * @return   bool                                     Success or failure.
     */
    public function send_crime_report_notification($crime_report) {
        // Check if WhatsApp integration is enabled
        if (!$this->is_enabled()) {
            return false;
        }
        
        // Get security group numbers to notify
        $numbers = $this->get_security_group_numbers($crime_report->get_security_groups());
        
        if (empty($numbers)) {
            return false;
        }
        
        // Prepare the message
        $message = $this->prepare_crime_report_message($crime_report);
        
        // Send to each number
        $results = array();
        foreach ($numbers as $number) {
            $results[] = $this->send_message($number, $message);
        }
        
        // Return true if at least one message was sent successfully
        return in_array(true, $results);
    }

    /**
     * Check if WhatsApp integration is enabled and configured.
     *
     * @since    1.0.0
     * @access   private
     * @return   bool    True if enabled and configured, false otherwise.
     */
    private function is_enabled() {
        $enabled = get_option('sandbaai_crime_enable_whatsapp', 'no');
        
        return $enabled === 'yes' && !empty($this->api_token) && !empty($this->phone_number_id);
    }

    /**
     * Get WhatsApp numbers for security groups.
     *
     * @since    1.0.0
     * @access   private
     * @param    array    $security_group_ids    Array of security group IDs.
     * @return   array                          Array of WhatsApp numbers.
     */
    private function get_security_group_numbers($security_group_ids) {
        global $wpdb;
        
        if (empty($security_group_ids)) {
            return array();
        }
        
        $table_name = $wpdb->prefix . 'sandbaai_security_groups';
        
        $placeholders = implode(',', array_fill(0, count($security_group_ids), '%d'));
        
        $query = $wpdb->prepare(
            "SELECT contact_numbers FROM $table_name WHERE id IN ($placeholders)",
            $security_group_ids
        );
        
        $results = $wpdb->get_col($query);
        
        $numbers = array();
        foreach ($results as $contact_numbers) {
            // Split multiple numbers and clean them
            $group_numbers = explode(',', $contact_numbers);
            foreach ($group_numbers as $number) {
                $clean_number = $this->format_phone_number(trim($number));
                if (!empty($clean_number)) {
                    $numbers[] = $clean_number;
                }
            }
        }
        
        return array_unique($numbers);
    }

    /**
     * Format a phone number for WhatsApp.
     *
     * @since    1.0.0
     * @access   private
     * @param    string    $number    The phone number to format.
     * @return   string              The formatted phone number.
     */
    private function format_phone_number($number) {
        // Remove all non-numeric characters
        $number = preg_replace('/[^0-9]/', '', $number);
        
        // Ensure it has the country code (default to South Africa +27)
        if (strlen($number) === 10 && substr($number, 0, 1) === '0') {
            $number = '27' . substr($number, 1);
        }
        
        return $number;
    }

    /**
     * Prepare a crime report message for WhatsApp.
     *
     * @since    1.0.0
     * @access   private
     * @param    Sandbaai_Crime_Report    $crime_report    The crime report object.
     * @return   string                                   The formatted message.
     */
    private function prepare_crime_report_message($crime_report) {
        $message = "ğŸš¨ *NEW CRIME REPORT* ğŸš¨\n\n";
        $message .= "*" . $crime_report->get_title() . "*\n\n";
        $message .= "*Type:* " . $crime_report->get_category() . "\n";
        $message .= "*Date/Time:* " . date('Y-m-d H:i', strtotime($crime_report->get_date_time())) . "\n";
        $message .= "*Location:* " . $crime_report->get_location() . "\n";
        $message .= "*Zone:* " . $crime_report->get_zone() . "\n\n";
        $message .= "*Description:* " . $crime_report->get_description() . "\n\n";
        
        // Add a link to view the report if applicable
        $view_url = admin_url('admin.php?page=sandbaai-crime-reports&action=view&id=' . $crime_report->get_id());
        $message .= "View details: " . $view_url;
        
        return $message;
    }

    /**
     * Send a WhatsApp message.
     *
     * @since    1.0.0
     * @access   private
     * @param    string    $to        The recipient's phone number.
     * @param    string    $message   The message to send.
     * @return   bool                True on success, false on failure.
     */
    private function send_message($to, $message) {
        $url = $this->api_endpoint . $this->phone_number_id . '/messages';
        
        $headers = array(
            'Authorization' => 'Bearer ' . $this->api_token,
            'Content-Type' => 'application/json',
        );
        
        $body = array(
            'messaging_product' => 'whatsapp',
            'recipient_type' => 'individual',
            'to' => $to,
            'type' => 'text',
            'text' => array(
                'preview_url' => true,
                'body' => $message,
            ),
        );
        
        $args = array(
            'headers' => $headers,
            'body' => json_encode($body),
            'method' => 'POST',
            'data_format' => 'body',
            'timeout' => 15,
        );
        
        $response = wp_remote_post($url, $args);
        
        if (is_wp_error($response)) {
            // Log error
            error_log('WhatsApp API Error: ' . $response->get_error_message());
            return false;
        }
        
        $response_code = wp_remote_retrieve_response_code($response);
        $response_body = json_decode(wp_remote_retrieve_body($response), true);
        
        // Success if status code is 200 and we have a message ID
        return $response_code === 200 && isset($response_body['messages'][0]['id']);
    }

    /**
     * Test the WhatsApp integration.
     *
     * @since    1.0.0
     * @param    string    $number    The phone number to test.
     * @return   bool|WP_Error       True on success, WP_Error on failure.
     */
    public function test_integration($number) {
        // Check if WhatsApp integration is enabled
        if (!$this->is_enabled()) {
            return new WP_Error('whatsapp_disabled', 'WhatsApp integration is not enabled or configured.');
        }
        
        // Format the number
        $formatted_number = $this->format_phone_number($number);
        if (empty($formatted_number)) {
            return new WP_Error('invalid_number', 'Invalid phone number format.');
        }
        
        // Prepare a test message
        $message = "ğŸ”” *WhatsApp Integration Test* ğŸ””\n\n";
        $message .= "This is a test message from the Sandbaai Crime Reporting System. If you received this message, the WhatsApp integration is working correctly.";
        
        // Send the message
        $result = $this->send_message($formatted_number, $message);
        
        if (!$result) {
            return new WP_Error('send_failed', 'Faile